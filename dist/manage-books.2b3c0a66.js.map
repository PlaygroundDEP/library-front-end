{"mappings":"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","sources":["src/ts/page/manage-books.ts"],"sourcesContent":["import {send} from \"process\";\n\nconst btnNewBook = document.querySelector<HTMLButtonElement>('#btn-new-book')!;\nconst frmBook = document.querySelector<HTMLFormElement>('#frm-book')!;\nconst txtISBN = document.querySelector<HTMLInputElement>('#txt-isbn')!;\nconst txtName = document.querySelector<HTMLInputElement>('#txt-name')!;\nconst txtAuthor = document.querySelector<HTMLInputElement>('#txt-author')!;\nconst btnBrowse = document.querySelector<HTMLButtonElement>('#btn-browse')!;\nconst btnRemove = document.querySelector<HTMLButtonElement>('#btn-remove')!;\nconst txtPreview = document.querySelector<HTMLInputElement>('#txt-preview')!;\nconst divThumbnail = document.querySelector<HTMLDivElement>('#thumbnail')!;\nconst paginationElm = document.querySelector<HTMLUListElement>('#pagination')!;\nconst tblBooks = document.querySelector<HTMLTableElement>(\"table\")!;\nconst btnSave = document.querySelector<HTMLButtonElement>(\"#btn-save\")!;\nconst btnClear = document.querySelector<HTMLButtonElement>('#btn-clear')!;\nconst txtSearch = document.querySelector<HTMLInputElement>('#txt-search')!;\nlet blobURL: null | string = null;\n\nfrmBook.addEventListener('reset', () => {\n    const inputElms = [txtISBN, txtName, txtAuthor];\n    inputElms.forEach(elm => elm.classList.remove('is-valid', 'is-invalid'));\n    inputElms[0].focus();\n    divThumbnail.style.backgroundImage = '';\n    tblBooks.querySelectorAll(\"tr\").forEach(elm => elm.classList.remove('selected'));\n    btnRemove.click();\n    btnSave.innerText = 'SAVE';\n});\n\nfrmBook.addEventListener('submit', (e) => {\n    e.preventDefault();\n    if (btnSave.innerText === 'EDIT') {\n        setEnableForm();\n        btnSave.innerText = 'SAVE';\n        btnRemove.disabled = !divThumbnail.style.backgroundImage;\n        return;\n    }\n\n\n    const inputElms = [txtISBN, txtName, txtAuthor];\n    const invalidInputElms = inputElms.filter(elm => !elm.classList.contains('is-valid'));\n\n    if (invalidInputElms.length > 0) {\n        invalidInputElms.forEach(elm => elm.classList.add('is-invalid'));\n        invalidInputElms[0].focus();\n        return;\n    }\n\n    /*Todo : Now lets send the data to the backend for saving*/\n});\n\nbtnBrowse.addEventListener('click', () => txtPreview.click());\ntxtPreview.addEventListener('input', () => {\n    if (txtPreview.files![0]) {\n        if (blobURL) URL.revokeObjectURL(blobURL);\n        blobURL = URL.createObjectURL(txtPreview.files![0]);\n        divThumbnail.style.backgroundImage = `url(${blobURL})`;\n        // setTimeout(()=>URL.revokeObjectURL(blobURL), 0);\n        btnRemove.disabled = false;\n    }\n});\n\nbtnRemove.addEventListener('click', () => {\n    txtPreview.value = '';\n    if (blobURL) URL.revokeObjectURL(blobURL);\n    divThumbnail.style.backgroundImage = '';\n    btnRemove.disabled = true;\n});\n\nsetEnableForm(false);\n\nfunction setEnableForm(enable: boolean = true) {\n    for (const element of frmBook.elements) {\n        if (element instanceof HTMLInputElement || element instanceof HTMLButtonElement) {\n            element.disabled = !enable;\n        }\n    }\n}\n\nbtnNewBook.addEventListener('click', () => {\n    setEnableForm();\n    btnRemove.click();\n    frmBook.reset();\n    txtISBN.focus();\n});\n\n/*function checkValidity(this: HTMLInputElement) {\n    const isbn = txtISBN.value;\n    const name = txtName.value;\n    const author = txtAuthor.value;\n\n    txtISBN.classList.remove('is-invalid');\n    txtISBN.classList.remove('is-valid');\n    txtName.classList.remove('is-invalid');\n    txtName.classList.remove('is-valid');\n    txtAuthor.classList.remove('is-invalid');\n    txtAuthor.classList.remove('is-valid');\n\n    if (!/^\\d+$/.test(isbn)) {\n        txtISBN.classList.add('is-invalid');\n    } else {\n        txtISBN.classList.add('is-valid')\n    }\n\n    if (!/^.+$/.test(name)) {\n        txtISBN.classList.add('is-invalid');\n    } else {\n        txtISBN.classList.add('is-valid')\n    }\n\n    if (!/^[A-Za-z ]+$/.test(author)) {\n        txtISBN.classList.add('is-invalid');\n    } else {\n        txtISBN.classList.add('is-valid')\n    }\n}\n\ntxtISBN.addEventListener('input', checkValidity)\ntxtName.addEventListener('input', checkValidity)\ntxtAuthor.addEventListener('input', checkValidity)\n*/\n\n\nfunction checkValidityOfISBN() {\n    return /^\\d+$/.test(txtISBN.value);\n}\n\nfunction checkValidityOfName() {\n    return /^.+$/.test(txtName.value);\n}\n\nfunction checkValidityOfAuthor() {\n    return /^[A-Za-z ]+$/.test(txtAuthor.value);\n}\n\n\ntxtISBN.addEventListener('input', checkValidity);\ntxtName.addEventListener('input', checkValidity);\ntxtAuthor.addEventListener('input', checkValidity);\n\nfunction checkValidity(e: Event) {\n    (e.target as HTMLInputElement).classList.remove('is-valid', 'is-invalid');\n    if (e.target === txtISBN) {\n        checkValidityOfISBN() ? txtISBN.classList.add('is-valid') : txtISBN.classList.add('is-invalid');\n    } else if (e.target === txtName) {\n        checkValidityOfName() ? txtName.classList.add('is-valid') : txtName.classList.add('is-invalid');\n    } else {\n        checkValidityOfAuthor() ? txtAuthor.classList.add('is-valid') : txtAuthor.classList.add('is-invalid');\n    }\n}\n\nconst pageSize = 5;\nlet booksCount = 55;\nlet activePage = 1;\n\ninitPagination();\n\nfunction initPagination(page: number = 1) {\n    let pages = Math.ceil(booksCount / pageSize);\n    if (page < 1 || page > pages) page = pages;\n    activePage = page;\n    let end = page + 4;\n    let start = page - 5;\n    if (end > pages) {\n        start -= (end - pages);\n        end = pages;\n    }\n    if (start < 1) {\n        end += (1 - start);\n        if (end > pages) end = pages;\n        start = 1;\n    }\n    let html = `<li class=\"page-item\"><a class=\"page-link\" href=\"#\">&laquo;</a></li>`;\n    for (let i = start; i <= end; i++) {\n        html += `<li class=\"page-item ${i === page ? 'active' : ''}\"><a class=\"page-link\" href=\"#\">${i}</a></li>`\n    }\n    html += `<li class=\"page-item\"><a class=\"page-link\" href=\"#\">&raquo;</a></li>`;\n    paginationElm.innerHTML = html;\n}\n\npaginationElm.addEventListener('click', (e) => {\n    let elm = (e.target as HTMLElement);\n    if (elm.tagName === 'A') {\n        if (elm.innerText === '«') {\n            initPagination(--activePage);\n        } else if (elm.innerText === '»') {\n            initPagination(++activePage);\n        } else {\n            initPagination(+elm.innerText);\n            loadBooks(txtSearch.value, activePage);\n        }\n        e.stopPropagation();\n    }\n});\n\ntblBooks.querySelector(\"tbody\")!.addEventListener('click', (e) => {\n    if ((e.target as HTMLElement).classList.contains('trash') ||\n        (e.target as HTMLElement).classList.contains('fa-trash')) {\n        e.stopPropagation();\n        const elm = e.target as HTMLElement;\n        const row = elm.closest<HTMLTableRowElement>('tr')!;\n        const isbn = (row.querySelector<HTMLDivElement>(\".isbn\")!.innerText);\n        /*if (confirm(`Are you sure to delete the ${isbn}?`)) {\n            row.remove();\n        }*/\n\n        const promise = Swal.fire({\n            title: 'Confirm?',\n            text: `Are you sure to delete the ${isbn}?`,\n            icon: 'question',\n            confirmButtonText: 'Yes',\n            denyButtonText: 'No',\n            showDenyButton: true\n        }) as Promise<any>;\n\n        promise.then((resolve) => {\n            if (resolve.isConfirmed) {\n                frmBook.reset();\n                row.remove();\n            }\n        });\n    }\n\n    console.log(\"working\");\n});\n\ndeclare const Swal: any;\n\ntblBooks.querySelector(\"tbody\")!.addEventListener('click', (e) => {\n    const row = (e.target as HTMLElement).closest<HTMLTableRowElement>('tr')!;\n    tblBooks.querySelectorAll(\"tr\").forEach(elm => elm.classList.remove('selected'));\n    row.classList.add('selected');\n\n    const isbn = row.querySelector<HTMLDivElement>(\".isbn\")!.innerText.replace('ISBN:', '');\n    const name = row.querySelector<HTMLDivElement>(\".book-name\")!.innerText;\n    const author = row.querySelector<HTMLDivElement>(\".book-author\")!.innerText;\n    const bookPreview = row.querySelector<HTMLDivElement>('.book-preview')!;\n\n    txtISBN.classList.add('is-valid');\n    txtName.classList.add('is-valid');\n    txtAuthor.classList.add('is-valid');\n\n    txtISBN.value = isbn;\n    txtName.value = name;\n    txtAuthor.value = author;\n    divThumbnail.style.backgroundImage = bookPreview.style.backgroundImage;\n    setEnableForm(false);\n    btnSave.disabled = false;\n    btnClear.disabled = false;\n    btnSave.innerText = 'EDIT';\n\n});\n\n/*const myPromise = sendHTTPRequest(\"GET\", 'http://localhost:8080/library/v2/books');\nmyPromise.then((data)=>{\n    console.log('Success', data.status, data.body);\n});\nmyPromise.catch((err)=>{\n    console.log('Catch an error', err.status, err.body);\n});*/\n\nconst BOOKS_API = `${process.env.API_URL}/v2/books`;\n\nloadBooks();\n\n\ntxtSearch.addEventListener('input',()=>loadBooks(txtSearch.value));\n\nfunction loadBooks(query:string='', page:number=1) {\n    httpRequest('GET', `${BOOKS_API}?q=${query}&page=${page}&size=${pageSize}`)\n        .then((data)=>{\n            /*Let's clear the table*/\n            tblBooks.querySelectorAll(\"tr\").forEach(row=>row.remove());\n            const books: Array<{\n                author: string,\n                availability: boolean,\n                isbn: string,\n                name: string,\n                preview: string\n            }> = JSON.parse(data.body);\n\n            books.forEach(book => {\n                const rowElm = document.createElement('tr');\n\n                rowElm.innerHTML = `<td><div class=\"book-preview ${book.preview === null ? 'no-image' : ''}\" style=\"background-image: url(${book.preview})\"></div></td>\n                                    <td>\n                                        <div class=\"isbn\">ISBN: ${book.isbn}</div>\n                                        <div class=\"book-name text-bold\">${book.name}</div>\n                                        <div class=\"book-author\">${book.author}</div>\n                                    </td>\n                                    <td class=\"trash\">\n                                        <i class=\"fas fa-trash\"></i>\n                                    </td>`;\n\n                tblBooks.querySelector(\"tbody\")!.append(rowElm);\n            });\n\n        }). catch((err)=>{\n\n    });\n}\n\n\n\n"],"names":["$080e4d6a2ae01d09$var$btnNewBook","document","querySelector","$080e4d6a2ae01d09$var$frmBook","$080e4d6a2ae01d09$var$txtISBN","$080e4d6a2ae01d09$var$txtName","$080e4d6a2ae01d09$var$txtAuthor","$080e4d6a2ae01d09$var$btnBrowse","$080e4d6a2ae01d09$var$btnRemove","$080e4d6a2ae01d09$var$txtPreview","$080e4d6a2ae01d09$var$divThumbnail","$080e4d6a2ae01d09$var$paginationElm","$080e4d6a2ae01d09$var$tblBooks","$080e4d6a2ae01d09$var$btnSave","$080e4d6a2ae01d09$var$btnClear","$080e4d6a2ae01d09$var$txtSearch","$080e4d6a2ae01d09$var$blobURL","$080e4d6a2ae01d09$var$setEnableForm","enable","element","elements","HTMLInputElement","HTMLButtonElement","disabled","$080e4d6a2ae01d09$var$checkValidity","e","target","classList","remove","test","value","add","addEventListener","inputElms","forEach","elm","focus","style","backgroundImage","querySelectorAll","click","innerText","preventDefault","invalidInputElms","filter","contains","length","files","URL","revokeObjectURL","createObjectURL","reset","$080e4d6a2ae01d09$var$activePage","$080e4d6a2ae01d09$var$initPagination","page","pages","Math","ceil","$080e4d6a2ae01d09$var$booksCount","end","start","html","i","innerHTML","tagName","$080e4d6a2ae01d09$var$loadBooks","stopPropagation","row","closest","isbn","Swal","fire","title","text","icon","confirmButtonText","denyButtonText","showDenyButton","then","resolve","isConfirmed","console","log","replace","name","author","bookPreview","query","httpRequest","data","JSON","parse","body","book","rowElm","createElement","preview","append","catch","err"],"version":3,"file":"manage-books.2b3c0a66.js.map"}