{"mappings":"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","sources":["src/ts/page/manage-books.ts"],"sourcesContent":["const btnNewBook = document.querySelector<HTMLButtonElement>('#btn-new-book')!;\nconst frmBook = document.querySelector<HTMLFormElement>('#frm-book')!;\nconst txtISBN = document.querySelector<HTMLInputElement>('#txt-isbn')!;\nconst txtName = document.querySelector<HTMLInputElement>('#txt-name')!;\nconst txtAuthor = document.querySelector<HTMLInputElement>('#txt-author')!;\nconst btnBrowse = document.querySelector<HTMLButtonElement>('#btn-browse')!;\nconst btnRemove = document.querySelector<HTMLButtonElement>('#btn-remove')!;\nconst txtPreview = document.querySelector<HTMLInputElement>('#txt-preview')!;\nconst divThumbnail = document.querySelector<HTMLDivElement>('#thumbnail')!;\nconst paginationElm = document.querySelector<HTMLUListElement>('#pagination')!;\nconst tblBooks = document.querySelector<HTMLTableElement>(\"table\")!;\nconst btnSave = document.querySelector<HTMLButtonElement>(\"#btn-save\")!;\nconst btnClear = document.querySelector<HTMLButtonElement>('#btn-clear')!;\nlet blobURL: null | string = null;\n\nfrmBook.addEventListener('reset', () => {\n    const inputElms = [txtISBN, txtName, txtAuthor];\n    inputElms.forEach(elm => elm.classList.remove('is-valid', 'is-invalid'));\n    inputElms[0].focus();\n    divThumbnail.style.backgroundImage = '';\n    tblBooks.querySelectorAll(\"tr\").forEach(elm => elm.classList.remove('selected'));\n    btnRemove.click();\n    btnSave.innerText = 'SAVE';\n});\n\nfrmBook.addEventListener('submit', (e) => {\n    e.preventDefault();\n    if (btnSave.innerText === 'EDIT') {\n        setEnableForm();\n        btnSave.innerText = 'SAVE';\n        btnRemove.disabled = !divThumbnail.style.backgroundImage;\n        return;\n    }\n\n\n    const inputElms = [txtISBN, txtName, txtAuthor];\n    const invalidInputElms = inputElms.filter(elm => !elm.classList.contains('is-valid'));\n\n    if (invalidInputElms.length > 0) {\n        invalidInputElms.forEach(elm => elm.classList.add('is-invalid'));\n        invalidInputElms[0].focus();\n        return;\n    }\n\n    /*Todo : Now lets send the data to the backend for saving*/\n});\n\nbtnBrowse.addEventListener('click', () => txtPreview.click());\ntxtPreview.addEventListener('input', () => {\n    if (txtPreview.files![0]) {\n        if (blobURL) URL.revokeObjectURL(blobURL);\n        blobURL = URL.createObjectURL(txtPreview.files![0]);\n        divThumbnail.style.backgroundImage = `url(${blobURL})`;\n        // setTimeout(()=>URL.revokeObjectURL(blobURL), 0);\n        btnRemove.disabled = false;\n    }\n});\n\nbtnRemove.addEventListener('click', () => {\n    txtPreview.value = '';\n    if (blobURL) URL.revokeObjectURL(blobURL);\n    divThumbnail.style.backgroundImage = '';\n    btnRemove.disabled = true;\n});\n\nsetEnableForm(false);\n\nfunction setEnableForm(enable: boolean = true) {\n    for (const element of frmBook.elements) {\n        if (element instanceof HTMLInputElement || element instanceof HTMLButtonElement) {\n            element.disabled = !enable;\n        }\n    }\n}\n\nbtnNewBook.addEventListener('click', () => {\n    setEnableForm();\n    btnRemove.click();\n    frmBook.reset();\n    txtISBN.focus();\n});\n\n/*function checkValidity(this: HTMLInputElement) {\n    const isbn = txtISBN.value;\n    const name = txtName.value;\n    const author = txtAuthor.value;\n\n    txtISBN.classList.remove('is-invalid');\n    txtISBN.classList.remove('is-valid');\n    txtName.classList.remove('is-invalid');\n    txtName.classList.remove('is-valid');\n    txtAuthor.classList.remove('is-invalid');\n    txtAuthor.classList.remove('is-valid');\n\n    if (!/^\\d+$/.test(isbn)) {\n        txtISBN.classList.add('is-invalid');\n    } else {\n        txtISBN.classList.add('is-valid')\n    }\n\n    if (!/^.+$/.test(name)) {\n        txtISBN.classList.add('is-invalid');\n    } else {\n        txtISBN.classList.add('is-valid')\n    }\n\n    if (!/^[A-Za-z ]+$/.test(author)) {\n        txtISBN.classList.add('is-invalid');\n    } else {\n        txtISBN.classList.add('is-valid')\n    }\n}\n\ntxtISBN.addEventListener('input', checkValidity)\ntxtName.addEventListener('input', checkValidity)\ntxtAuthor.addEventListener('input', checkValidity)\n*/\n\n\nfunction checkValidityOfISBN() {\n    return /^\\d+$/.test(txtISBN.value);\n}\n\nfunction checkValidityOfName() {\n    return /^.+$/.test(txtName.value);\n}\n\nfunction checkValidityOfAuthor() {\n    return /^[A-Za-z ]+$/.test(txtAuthor.value);\n}\n\n\ntxtISBN.addEventListener('input', checkValidity);\ntxtName.addEventListener('input', checkValidity);\ntxtAuthor.addEventListener('input', checkValidity);\n\nfunction checkValidity(e: Event) {\n    (e.target as HTMLInputElement).classList.remove('is-valid', 'is-invalid');\n    if (e.target === txtISBN) {\n        checkValidityOfISBN() ? txtISBN.classList.add('is-valid') : txtISBN.classList.add('is-invalid');\n    } else if (e.target === txtName) {\n        checkValidityOfName() ? txtName.classList.add('is-valid') : txtName.classList.add('is-invalid');\n    } else {\n        checkValidityOfAuthor() ? txtAuthor.classList.add('is-valid') : txtAuthor.classList.add('is-invalid');\n    }\n}\n\nconst pageSize = 5;\nlet booksCount = 55;\nlet activePage = 1;\n\ninitPagination();\n\nfunction initPagination(page: number = 1) {\n    let pages = Math.ceil(booksCount / pageSize);\n    if (page < 1 || page > pages) page = pages;\n    activePage = page;\n    let end = page + 4;\n    let start = page - 5;\n    if (end > pages) {\n        start -= (end - pages);\n        end = pages;\n    }\n    if (start < 1) {\n        end += (1 - start);\n        if (end > pages) end = pages;\n        start = 1;\n    }\n    let html = `<li class=\"page-item\"><a class=\"page-link\" href=\"#\">&laquo;</a></li>`;\n    for (let i = start; i <= end; i++) {\n        html += `<li class=\"page-item ${i === page ? 'active' : ''}\"><a class=\"page-link\" href=\"#\">${i}</a></li>`\n    }\n    html += `<li class=\"page-item\"><a class=\"page-link\" href=\"#\">&raquo;</a></li>`;\n    paginationElm.innerHTML = html;\n}\n\npaginationElm.addEventListener('click', (e) => {\n    let elm = (e.target as HTMLElement);\n    if (elm.tagName === 'A') {\n        if (elm.innerText === '«') {\n            initPagination(--activePage);\n        } else if (elm.innerText === '»') {\n            initPagination(++activePage);\n        } else {\n            initPagination(+elm.innerText);\n        }\n        e.stopPropagation();\n    }\n});\n\ntblBooks.querySelector(\"tbody\")!.addEventListener('click', (e) => {\n    if ((e.target as HTMLElement).classList.contains('trash') ||\n        (e.target as HTMLElement).classList.contains('fa-trash')) {\n        e.stopPropagation();\n        const elm = e.target as HTMLElement;\n        const row = elm.closest<HTMLTableRowElement>('tr')!;\n        const isbn = (row.querySelector<HTMLDivElement>(\".isbn\")!.innerText);\n        /*if (confirm(`Are you sure to delete the ${isbn}?`)) {\n            row.remove();\n        }*/\n\n        const promise = Swal.fire({\n            title: 'Confirm?',\n            text: `Are you sure to delete the ${isbn}?`,\n            icon: 'question',\n            confirmButtonText: 'Yes',\n            denyButtonText: 'No',\n            showDenyButton: true\n        }) as Promise<any>;\n\n        promise.then((resolve) => {\n            if (resolve.isConfirmed) {\n                frmBook.reset();\n                row.remove();\n            }\n        });\n    }\n\n    console.log(\"working\");\n});\n\ndeclare const Swal: any;\n\ntblBooks.querySelector(\"tbody\")!.addEventListener('click', (e) => {\n    const row = (e.target as HTMLElement).closest<HTMLTableRowElement>('tr')!;\n    tblBooks.querySelectorAll(\"tr\").forEach(elm => elm.classList.remove('selected'));\n    row.classList.add('selected');\n\n    const isbn = row.querySelector<HTMLDivElement>(\".isbn\")!.innerText.replace('ISBN:', '');\n    const name = row.querySelector<HTMLDivElement>(\".book-name\")!.innerText;\n    const author = row.querySelector<HTMLDivElement>(\".book-author\")!.innerText;\n    const bookPreview = row.querySelector<HTMLDivElement>('.book-preview')!;\n\n    txtISBN.classList.add('is-valid');\n    txtName.classList.add('is-valid');\n    txtAuthor.classList.add('is-valid');\n\n    txtISBN.value = isbn;\n    txtName.value = name;\n    txtAuthor.value = author;\n    divThumbnail.style.backgroundImage = bookPreview.style.backgroundImage;\n    setEnableForm(false);\n    btnSave.disabled = false;\n    btnClear.disabled = false;\n    btnSave.innerText = 'EDIT';\n\n});\n\nconst myPromise = sendHTTPRequest(\"GET\", 'http://localhost:8080/library/v2/books');\nmyPromise.then((data)=>{\n    console.log('Success', data.status, data.body);\n});\nmyPromise.catch((err)=>{\n    console.log('Catch an error', err.status, err.body);\n});\n\n\nfunction sendHTTPRequest(httpMethod: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD',\n                         url: string,\n                         headers: Array<{ name: string, value: string }> = [],\n                         body: string | FormData | null = null) {\n\n    return new Promise<{status:number, body: string, http:XMLHttpRequest}>((resolve, reject) => {\n\n        const http = new XMLHttpRequest();\n\n        http.onreadystatechange = () => {\n            if (http.readyState === http.DONE) {\n                if (http.status>=200 && http.status<=299) {\n                    resolve({\n                        status: +http.status,\n                        body: http.responseText,\n                        http: http\n                    });\n                }else {\n                    reject({\n                        status: +http.status,\n                        body: http.responseText,\n                        http:http\n                    });\n                }\n            }\n        };\n\n        http.open(httpMethod, url, true);\n\n        headers.forEach(header => http.setRequestHeader(header.name, header.value));\n\n        http.send(body);\n\n    })\n}\n\n"],"names":["btnNewBook","document","querySelector","frmBook","txtISBN","txtName","txtAuthor","btnBrowse","btnRemove","txtPreview","divThumbnail","paginationElm","tblBooks","btnSave","btnClear","blobURL","setEnableForm","enable","element","elements","HTMLInputElement","HTMLButtonElement","disabled","checkValidityOfISBN","test","value","checkValidityOfName","checkValidityOfAuthor","checkValidity","e","target","classList","remove","add","addEventListener","inputElms","forEach","elm","focus","style","backgroundImage","querySelectorAll","click","innerText","preventDefault","invalidInputElms","filter","contains","length","files","URL","revokeObjectURL","createObjectURL","reset","pageSize","booksCount","activePage","initPagination","page","pages","Math","ceil","end","start","html","i","innerHTML","tagName","stopPropagation","row","closest","isbn","Swal","fire","title","text","icon","confirmButtonText","denyButtonText","showDenyButton","then","resolve","isConfirmed","console","log","replace","name","author","bookPreview","myPromise","sendHTTPRequest","httpMethod","url","headers","body","Promise","reject","http","XMLHttpRequest","onreadystatechange","readyState","DONE","status","responseText","open","header","setRequestHeader","send","data","catch","err"],"version":3,"file":"manage-books.636082eb.js.map"}